---
title: "Python Basics"
author: "Dylan Thody"
date: "2024-02-15"
categories: [variables, values, types]
image: "Pythoncartoon.pdf"

---


A value is datum (literal) such as a number or text.

There are different types of values:

* 323.3 is known as a float or double;
* 22 is an integer
* "Hello World!" is a string.

```{python}
a = 10
print(a)
```

Here we are going to define a list containing elements of different data types

```{python}
list_example = [10, 1.23, "like this", True, None]
#Print the entire list
print(list_example)
```

```{python}
string_one = "This is an example "
string_two = "of string concatenation"
#all of the basic operators we see in math are available to use
# + for addition, - for subtraction, * for multiplication
# ** for exponent/powers, / for division, // for integer division
string_full = string_one + string_two
#this works as you would expect on numbers
print(string_full)
```

It works for lists too

```{python}
#it works for lists too
list_one = ["apples", "oranges"]
list_two = ["pears", "satsumas"]
list_full = list_one + list_two
print(list_full)
```

We can also multiply strings
```{python}
string = "apples, "
print(string * 3)
```

Boolean data have either True or False value
```{python}
10 == 20
10 == '10'
```

the == is an operator that compares the objects on either side and returns True if they have the same values
```{python}
boolean_condition1 = 10 == 20
print(boolean_condition1)

boolean_condition2 = 10 == '10'
print(boolean_condition2)
```

The real power of conditions comes when we start to use them in more complex examples, such as if statements
```{python}
name = "Geneseo"
score = 99

if name == "Geneseo" and score > 90:
    print("Geneseo, you achieved a high score.")

if name == "Geneseo" or score > 90:
    print("You could be called Geneseo or have a high score")

if name != "Geneseo" and score > 90:
    print("You are not called Geneseo and you have a high score")
```

One of the most useful conditional keywords is "in", this one must pop up ten times a day in most coders' lives because it can pick out a variable or make sure something is where it's supposed to be
```{python}
name_list = ["Lovelace", "Smith", "Hopper", "Babbage"]

print("Lovelace" in name_list)

print("Bob" in name_list)
```

One conditional construct we're bound to use at some point, is the if-else chain
```{python}
score = 98

if score == 100:
    print("Top marks!")
elif score > 90 and score < 100:
    print("High score!")
elif score > 10 and score <= 90:
    pass
else:
    print("Better luck next time.")
```

