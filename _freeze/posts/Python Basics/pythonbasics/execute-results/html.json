{
  "hash": "4c1e42b521900df2f66528eb216277d2",
  "result": {
    "markdown": "---\ntitle: \"Python Basics\"\nauthor: \"Dylan Thody\"\ndate: \"2024-02-15\"\ncategories: [variables, values, types]\nimage: \"Pythoncartoon.pdf\"\n\n---\n\n## Variables\n\nA value is datum (literal) such as a number or text.\n\nThere are different types of values:\n\n* 323.3 is known as a float or double;\n* 22 is an integer\n* \"Hello World!\" is a string.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\na = 10\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\nHere we are going to define a list containing elements of different data types\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nlist_example = [10, 1.23, \"like this\", True, None]\n#Print the entire list\nprint(list_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 1.23, 'like this', True, None]\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nstring_one = \"This is an example \"\nstring_two = \"of string concatenation\"\n#all of the basic operators we see in math are available to use\n# + for addition, - for subtraction, * for multiplication\n# ** for exponent/powers, / for division, // for integer division\nstring_full = string_one + string_two\n#this works as you would expect on numbers\nprint(string_full)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is an example of string concatenation\n```\n:::\n:::\n\n\nIt works for lists too\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#it works for lists too\nlist_one = [\"apples\", \"oranges\"]\nlist_two = [\"pears\", \"satsumas\"]\nlist_full = list_one + list_two\nprint(list_full)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apples', 'oranges', 'pears', 'satsumas']\n```\n:::\n:::\n\n\nWe can also multiply strings\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nstring = \"apples, \"\nprint(string * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napples, apples, apples, \n```\n:::\n:::\n\n\nBoolean data have either True or False value\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n10 == 20\n10 == '10'\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nFalse\n```\n:::\n:::\n\n\nthe == is an operator that compares the objects on either side and returns True if they have the same values\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nboolean_condition1 = 10 == 20\nprint(boolean_condition1)\n\nboolean_condition2 = 10 == '10'\nprint(boolean_condition2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nFalse\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pythonbasics_files"
    ],
    "filters": [],
    "includes": {}
  }
}