{
  "hash": "790646fbdab4b7e9eeb3f13220520ba4",
  "result": {
    "markdown": "---\ntitle: \"Python Basics\"\nauthor: \"Dylan Thody\"\ndate: \"2024-02-15\"\ncategories: [variables, values, types]\nimage: \"Pythoncartoon.pdf\"\n\n---\n\nA value is datum (literal) such as a number or text.\n\nThere are different types of values:\n\n* 323.3 is known as a float or double;\n* 22 is an integer\n* \"Hello World!\" is a string.\n\n::: {.cell execution_count=1}\n``` {.python .cell-code}\na = 10\nprint(a)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n10\n```\n:::\n:::\n\n\nHere we are going to define a list containing elements of different data types\n\n::: {.cell execution_count=2}\n``` {.python .cell-code}\nlist_example = [10, 1.23, \"like this\", True, None]\n#Print the entire list\nprint(list_example)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[10, 1.23, 'like this', True, None]\n```\n:::\n:::\n\n\n::: {.cell execution_count=3}\n``` {.python .cell-code}\nstring_one = \"This is an example \"\nstring_two = \"of string concatenation\"\n#all of the basic operators we see in math are available to use\n# + for addition, - for subtraction, * for multiplication\n# ** for exponent/powers, / for division, // for integer division\nstring_full = string_one + string_two\n#this works as you would expect on numbers\nprint(string_full)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nThis is an example of string concatenation\n```\n:::\n:::\n\n\nIt works for lists too\n\n::: {.cell execution_count=4}\n``` {.python .cell-code}\n#it works for lists too\nlist_one = [\"apples\", \"oranges\"]\nlist_two = [\"pears\", \"satsumas\"]\nlist_full = list_one + list_two\nprint(list_full)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n['apples', 'oranges', 'pears', 'satsumas']\n```\n:::\n:::\n\n\nWe can also multiply strings\n\n::: {.cell execution_count=5}\n``` {.python .cell-code}\nstring = \"apples, \"\nprint(string * 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\napples, apples, apples, \n```\n:::\n:::\n\n\nBoolean data have either True or False value\n\n::: {.cell execution_count=6}\n``` {.python .cell-code}\n10 == 20\n10 == '10'\n```\n\n::: {.cell-output .cell-output-display execution_count=6}\n```\nFalse\n```\n:::\n:::\n\n\nthe == is an operator that compares the objects on either side and returns True if they have the same values\n\n::: {.cell execution_count=7}\n``` {.python .cell-code}\nboolean_condition1 = 10 == 20\nprint(boolean_condition1)\n\nboolean_condition2 = 10 == '10'\nprint(boolean_condition2)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nFalse\nFalse\n```\n:::\n:::\n\n\nThe real power of conditions comes when we start to use them in more complex examples, such as if statements\n\n::: {.cell execution_count=8}\n``` {.python .cell-code}\nname = \"Geneseo\"\nscore = 99\n\nif name == \"Geneseo\" and score > 90:\n    print(\"Geneseo, you achieved a high score.\")\n\nif name == \"Geneseo\" or score > 90:\n    print(\"You could be called Geneseo or have a high score\")\n\nif name != \"Geneseo\" and score > 90:\n    print(\"You are not called Geneseo and you have a high score\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nGeneseo, you achieved a high score.\nYou could be called Geneseo or have a high score\n```\n:::\n:::\n\n\nOne of the most useful conditional keywords is \"in\", this one must pop up ten times a day in most coders' lives because it can pick out a variable or make sure something is where it's supposed to be\n\n::: {.cell execution_count=9}\n``` {.python .cell-code}\nname_list = [\"Lovelace\", \"Smith\", \"Hopper\", \"Babbage\"]\n\nprint(\"Lovelace\" in name_list)\n\nprint(\"Bob\" in name_list)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nTrue\nFalse\n```\n:::\n:::\n\n\nOne conditional construct we're bound to use at some point, is the if-else chain\n\n::: {.cell execution_count=10}\n``` {.python .cell-code}\nscore = 98\n\nif score == 100:\n    print(\"Top marks!\")\nelif score > 90 and score < 100:\n    print(\"High score!\")\nelif score > 10 and score <= 90:\n    pass\nelse:\n    print(\"Better luck next time.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nHigh score!\n```\n:::\n:::\n\n\n",
    "supporting": [
      "pythonbasics_files"
    ],
    "filters": [],
    "includes": {}
  }
}