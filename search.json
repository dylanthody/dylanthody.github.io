[
  {
    "objectID": "project.html",
    "href": "project.html",
    "title": "DANL 210 Project",
    "section": "",
    "text": "The integration of Environmental, Social, and Governance (ESG) metrics with financial analysis has become increasingly significant in recent years. ESG metrics provide a comprehensive view of a company‚Äôs ethical impact and sustainability practices, which are crucial for investors, regulators, and other stakeholders. Traditional financial analysis, while essential, often fails to capture these non-financial factors that can materially impact a company‚Äôs performance and long-term value. Therefore, unifying ESG metrics with financial analysis is not only relevant but also necessary to foster sustainable economic growth, enhance risk management, and promote responsible investment practices. Despite the recognized importance of ESG factors, there is still a lack of standardization and integration in how these metrics are assessed and incorporated into financial analysis. This project aims to address the specific problem of fragmented and inconsistent ESG reporting, which creates challenges for investors and other stakeholders in making informed decisions. The primary issue is the absence of a unified framework that combines ESG metrics with traditional financial indicators, leading to gaps in the evaluation of a company‚Äôs overall performance and sustainability. By developing a comprehensive and standardized approach to ESG and financial analysis integration, this research seeks to enhance the reliability and comparability of ESG data, ultimately supporting more effective and responsible decision-making in the financial markets."
  },
  {
    "objectID": "project.html#summary-statistics",
    "href": "project.html#summary-statistics",
    "title": "DANL 210 Project",
    "section": "2.3 Summary Statistics",
    "text": "2.3 Summary Statistics\n\nmpg &lt;- ggplot2::mpg\n\n\n\n\n  \n\n\n\nskim(mpg) %&gt;% \n  select(-n_missing)\n\n\nData summary\n\n\nName\nmpg\n\n\nNumber of rows\n234\n\n\nNumber of columns\n11\n\n\n_______________________\n\n\n\nColumn type frequency:\n\n\n\ncharacter\n6\n\n\nnumeric\n5\n\n\n________________________\n\n\n\nGroup variables\nNone\n\n\n\nVariable type: character\n\n\n\nskim_variable\ncomplete_rate\nmin\nmax\nempty\nn_unique\nwhitespace\n\n\n\n\nmanufacturer\n1\n4\n10\n0\n15\n0\n\n\nmodel\n1\n2\n22\n0\n38\n0\n\n\ntrans\n1\n8\n10\n0\n10\n0\n\n\ndrv\n1\n1\n1\n0\n3\n0\n\n\nfl\n1\n1\n1\n0\n5\n0\n\n\nclass\n1\n3\n10\n0\n7\n0\n\n\n\nVariable type: numeric\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nskim_variable\ncomplete_rate\nmean\nsd\np0\np25\np50\np75\np100\nhist\n\n\n\n\ndispl\n1\n3.47\n1.29\n1.6\n2.4\n3.3\n4.6\n7\n‚ñá‚ñÜ‚ñÜ‚ñÉ‚ñÅ\n\n\nyear\n1\n2003.50\n4.51\n1999.0\n1999.0\n2003.5\n2008.0\n2008\n‚ñá‚ñÅ‚ñÅ‚ñÅ‚ñá\n\n\ncyl\n1\n5.89\n1.61\n4.0\n4.0\n6.0\n8.0\n8\n‚ñá‚ñÅ‚ñá‚ñÅ‚ñá\n\n\ncty\n1\n16.86\n4.26\n9.0\n14.0\n17.0\n19.0\n35\n‚ñÜ‚ñá‚ñÉ‚ñÅ‚ñÅ\n\n\nhwy\n1\n23.44\n5.95\n12.0\n18.0\n24.0\n27.0\n44\n‚ñÖ‚ñÖ‚ñá‚ñÅ‚ñÅ"
  },
  {
    "objectID": "project.html#mpg-and-a-type-of-cars",
    "href": "project.html#mpg-and-a-type-of-cars",
    "title": "DANL 210 Project",
    "section": "2.4 MPG and a Type of Cars",
    "text": "2.4 MPG and a Type of Cars\nThe following boxplot shows how the distribution of highway MPG (hwy) varies by a type of cars (class) üöô üöö üöê.\n\nggplot(data = mpg) +\n  geom_boxplot(aes(x = class, y = hwy, fill = class),\n               show.legend = F) +\n  labs(x = \"Class\", y = \"Highway\\nMPG\")"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Dylan Thody",
    "section": "",
    "text": "Student at SUNY Geneseo. Student member of the New York State Society of Certified Public Accountants. Member of the Varsity Men‚Äôs Soccer Team and Student Managed Investment Fund."
  },
  {
    "objectID": "index.html#education",
    "href": "index.html#education",
    "title": "Dylan Thody",
    "section": "Education",
    "text": "Education\nState University of New York at Geneseo | Geneseo, NY  B.S. in Accounting | Aug 2022 - May 2026  Minor in Data Analytics"
  },
  {
    "objectID": "index.html#experience",
    "href": "index.html#experience",
    "title": "Dylan Thody",
    "section": "Experience",
    "text": "Experience\nSUNY Geneseo Student Managed Investment Fund | Financial Analyst | Jan 2024 - Present\nMens Warehouse | Sales Associate | Oct 2021 - Aug 2021"
  },
  {
    "objectID": "posts/starwars/starwars_df.html",
    "href": "posts/starwars/starwars_df.html",
    "title": "Star Wars",
    "section": "",
    "text": "Let‚Äôs analyze the starwars data:\nstarwars &lt;- read_csv(\"https://bcdanl.github.io/data/starwars.csv\")"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "href": "posts/starwars/starwars_df.html#variable-description-for-starwars-data.frame",
    "title": "Star Wars",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/starwars/starwars_df.html#human-vs.-droid",
    "href": "posts/starwars/starwars_df.html#human-vs.-droid",
    "title": "Star Wars",
    "section": "Human vs.¬†Droid",
    "text": "Human vs.¬†Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/post-with-code/index.html",
    "href": "posts/post-with-code/index.html",
    "title": "Post With Code",
    "section": "",
    "text": "This is a post with executable code with no space in the folder name.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "posts/welcome/index.html",
    "href": "posts/welcome/index.html",
    "title": "Welcome To My Blog",
    "section": "",
    "text": "This is the first post in a Quarto blog. Welcome!\n\nSince this post doesn‚Äôt specify an explicit image, the first image in the post will be used in the listing page of posts."
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html",
    "href": "posts/beer-markets/beer-markets.html",
    "title": "Arsenal",
    "section": "",
    "text": "Let‚Äôs analyze the beer_data data:\nbeer_data &lt;- read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#variable-description-for-beer_data-data.frame",
    "href": "posts/beer-markets/beer-markets.html#variable-description-for-beer_data-data.frame",
    "title": "Arsenal",
    "section": "Variable Description for beer_data data.frame",
    "text": "Variable Description for beer_data data.frame\nThe following describes the variables in the beer_data data.frame.\n\nhh: Household identifier\n_purchase_desc: Description of the purchase\nquantity: The quantity of beer purchased\nbrand: The brand of beer\ndollar_spent: The amount spent\nbeer_floz: Fluid ounces of beer\nprice_per_floz: Price per fluid ounce\ncontainer: Type of container\npromo: Whether the purchase was on promotion\nmarket: The market where the purchase was made\nDemographics: age, employment status, degree, class of worker (cow), race, and household information like microwave, dishwasher, tvcable, singlefamilyhome, and npeople (number of people in the household)"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "href": "posts/beer-markets/beer-markets.html#purchase-patterns",
    "title": "Arsenal",
    "section": "Purchase Patterns",
    "text": "Purchase Patterns\nWe‚Äôll explore the purchase patterns in the dataset. This includes understanding the most popular brands, the average quantity purchased, and spending habits across different markets. Here are some specific analyses we can perform:\n\nCalculate the total quantity and spending for each brand.\nFind the average quantity purchased and average spending per purchase.\nCompare the total spending across different markets.\n\nI‚Äôll begin with these analyses and create visualizations to help us understand the data better. Let‚Äôs start by calculating the total quantity and spending for each brand.\n\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\n# Reading the CSV file\nbeer_data = pd.read_csv(\"https://bcdanl.github.io/data/beer_markets.csv\")\n\n# Setting up the visualisation settings\nsns.set(style=\"whitegrid\")\n\n# Calculate total quantity and spending for each brand\nbrand_summary = beer_data.groupby('brand').agg({'quantity':'sum', 'dollar_spent':'sum'}).reset_index()\n\n# Sort by total quantity and spending\nbrand_summary_sorted_quantity = brand_summary.sort_values('quantity', ascending=False)\nbrand_summary_sorted_spent = brand_summary.sort_values('dollar_spent', ascending=False)\n\n\n# Plotting total quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=brand_summary_sorted_quantity, palette='viridis')\nplt.title('Total Quantity of Beer Purchased by Brand')\nplt.xlabel('Total Quantity')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n# Plotting total spending for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='dollar_spent', y='brand', data=brand_summary_sorted_spent, palette='viridis')\nplt.title('Total Spending on Beer by Brand')\nplt.xlabel('Total Spending')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe bar charts above display the total quantity of beer purchased and the total spending by brand. From the looks of it, certain brands dominate in terms of quantity sold and total spending, indicating their popularity.\nNow, let‚Äôs calculate the average quantity purchased and average spending per purchase. For this, we‚Äôll consider each row in the dataset as a separate purchase and compute the averages accordingly.\n\n# Calculate average quantity purchased and average spending per purchase\naverage_purchase = beer_data.groupby('brand').agg({\n    'quantity': 'mean', \n    'dollar_spent': 'mean'\n}).reset_index()\n\n# Sort by average quantity and average spending\naverage_purchase_sorted_quantity = average_purchase.sort_values('quantity', ascending=False)\naverage_purchase_sorted_spent = average_purchase.sort_values('dollar_spent', ascending=False)\n\n# Plotting average quantity for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='quantity', y='brand', data=average_purchase_sorted_quantity, palette='viridis')\nplt.title('Average Quantity of Beer Purchased by Brand')\nplt.xlabel('Average Quantity')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n# Plotting average spending for each brand\nplt.figure(figsize=(10, 8))\nsns.barplot(x='dollar_spent', y='brand', data=average_purchase_sorted_spent, palette='viridis')\nplt.title('Average Spending on Beer by Brand')\nplt.xlabel('Average Spending')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe visualizations above depict the average quantity of beer purchased per brand and the average spending per brand. This shows which brands tend to be bought in larger quantities on average and which brands tend to have higher spending per purchase, which could be indicative of their price point or the purchase of premium products.\nNext, we‚Äôll look at the total spending across different markets to see if there are any notable differences in spending habits geographically. To do this, we‚Äôll sum up the spending in each market and visualize it.\n\n# Calculate total spending in each market\nmarket_spending_summary = beer_data.groupby('market').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nmarket_spending_summary_sorted = market_spending_summary.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending in each market\nplt.figure(figsize=(12, 10))\nsns.barplot(x='dollar_spent', y='market', data=market_spending_summary_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Market')\nplt.xlabel('Total Spending')\nplt.ylabel('Market')\nplt.show()\n\n\n\n\nThe bar chart illustrates the total spending on beer by market, showcasing the differences in spending habits across various regions. Some markets have significantly higher spending, which could be due to a variety of factors including market size, consumer preferences, or economic factors.\nNow, let‚Äôs move on to the second analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#demographic-analysis",
    "href": "posts/beer-markets/beer-markets.html#demographic-analysis",
    "title": "Arsenal",
    "section": "Demographic Analysis",
    "text": "Demographic Analysis\nWe will examine which demographics are buying what kind of beer and whether spending habits vary by demographics such as age, employment, and race. For this, we could look at:\n\nSpending by age group\nSpending by employment status\nSpending by race\n\nI‚Äôll start by analyzing spending by age group.\n\n# Calculate total spending by age group\nage_group_spending = beer_data.groupby('age').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nage_group_spending_sorted = age_group_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by age group\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='age', data=age_group_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Age Group')\nplt.xlabel('Total Spending')\nplt.ylabel('Age Group')\nplt.show()\n\n\n\n\nThe bar chart demonstrates the total spending on beer segmented by age group, highlighting which age groups spend the most on beer. It appears that certain age groups are more dominant in beer spending, which may align with the purchasing power or preferences of those groups.\nNext, we will examine spending by employment status.\n\n# Calculate total spending by employment status\nemployment_spending = beer_data.groupby('employment').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nemployment_spending_sorted = employment_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by employment status\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='employment', data=employment_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Employment Status')\nplt.xlabel('Total Spending')\nplt.ylabel('Employment Status')\nplt.show()\n\n\n\n\nThe visualization shows the total spending on beer by employment status. We can see that certain employment groups, such as full-time workers, are spending more on beer, which might be related to their disposable income.\nFinally, let‚Äôs look at spending by race to complete the demographic analysis.\n\n# Calculate total spending by race\nrace_spending = beer_data.groupby('race').agg({'dollar_spent':'sum'}).reset_index()\n\n# Sort by total spending\nrace_spending_sorted = race_spending.sort_values('dollar_spent', ascending=False)\n\n# Plotting total spending by race\nplt.figure(figsize=(10, 6))\nsns.barplot(x='dollar_spent', y='race', data=race_spending_sorted, palette='viridis')\nplt.title('Total Spending on Beer by Race')\nplt.xlabel('Total Spending')\nplt.ylabel('Race')\nplt.show()\n\n\n\n\nThe bar chart above indicates the total spending on beer broken down by race, highlighting which racial groups account for the most beer spending within the dataset. This could reflect both the demographics of the regions where the data was collected and cultural preferences regarding beer.\nNow, let‚Äôs proceed to the third analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#price-sensitivity",
    "href": "posts/beer-markets/beer-markets.html#price-sensitivity",
    "title": "Arsenal",
    "section": "Price Sensitivity",
    "text": "Price Sensitivity\nWe‚Äôll look at the price per fluid ounce and see if there are any trends or correlations with the quantity purchased or the brand popularity. To do this, we‚Äôll calculate the average price per fluid ounce for each brand and then visualize how this relates to the average quantity purchased and the total quantity purchased by brand.\nFirst, let‚Äôs calculate the average price per fluid ounce for each brand.\n\n# Calculate average price per fluid ounce for each brand\nbrand_price_sensitivity = beer_data.groupby('brand').agg({\n    'price_per_floz': 'mean', \n    'quantity': 'sum'\n}).reset_index()\n\n# Sort by price per fluid ounce\nbrand_price_sensitivity_sorted = brand_price_sensitivity.sort_values('price_per_floz', ascending=True)\n\n# Plotting average price per fluid ounce for each brand and the total quantity purchased\nfig, ax1 = plt.subplots(figsize=(12, 10))\n\ncolor = 'tab:red'\nax1.set_xlabel('Brand')\nax1.set_ylabel('Average Price per Fluid Ounce', color=color)\nax1.bar(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['price_per_floz'], color=color)\nax1.tick_params(axis='y', labelcolor=color)\nax1.set_xticklabels(brand_price_sensitivity_sorted['brand'], rotation=90)\n\nax2 = ax1.twinx()  # instantiate a second axes that shares the same x-axis\ncolor = 'tab:blue'\nax2.set_ylabel('Total Quantity Purchased', color=color)  # we already handled the x-label with ax1\nax2.plot(brand_price_sensitivity_sorted['brand'], brand_price_sensitivity_sorted['quantity'], color=color)\nax2.tick_params(axis='y', labelcolor=color)\n\nfig.tight_layout()  # otherwise the right y-label is slightly clipped\nplt.title('Average Price per Fluid Ounce & Total Quantity Purchased by Brand')\nplt.show()\n\n\n\n\nIn the visualization, we have a bar graph showing the average price per fluid ounce for each brand (in red) and a line graph showing the total quantity purchased for each brand (in blue). This gives us a sense of whether there‚Äôs a relationship between the price and the quantity purchased. The x-axis labels are quite compressed due to the number of brands, but we can still observe trends such as whether lower-priced beers tend to be purchased in larger quantities.\nLastly, let‚Äôs move to the fourth analysis:"
  },
  {
    "objectID": "posts/beer-markets/beer-markets.html#promotional-impact",
    "href": "posts/beer-markets/beer-markets.html#promotional-impact",
    "title": "Arsenal",
    "section": "Promotional Impact",
    "text": "Promotional Impact\nWe‚Äôll assess the impact of promotions on the quantity of beer purchased. For this analysis, we can calculate the average quantity purchased with and without promotions and visualize the difference. We‚Äôll do this for each brand to see which brands are most affected by promotions.\nLet‚Äôs begin this analysis by looking at the average quantity purchased with and without promotions for each brand.\n\n# Calculate average quantity purchased with and without promotions for each brand\npromo_impact = beer_data.groupby(['brand', 'promo']).agg({'quantity':'mean'}).reset_index()\n\n# Pivot the data to have promo and non-promo side by side for each brand\npromo_impact_pivot = promo_impact.pivot(index='brand', columns='promo', values='quantity').reset_index()\npromo_impact_pivot.columns = ['brand', 'non_promo', 'promo']\n\n# Calculate the difference in average quantity purchased between promo and non-promo\npromo_impact_pivot['promo_impact'] = promo_impact_pivot['promo'] - promo_impact_pivot['non_promo']\n\n# Sort by the impact of promo\npromo_impact_pivot_sorted = promo_impact_pivot.sort_values('promo_impact', ascending=False)\n\n# Plotting the difference in average quantity purchased between promo and non-promo for each brand\nplt.figure(figsize=(12, 10))\nsns.barplot(x='promo_impact', y='brand', data=promo_impact_pivot_sorted, palette='viridis')\nplt.title('Impact of Promotions on Average Quantity Purchased by Brand')\nplt.xlabel('Difference in Average Quantity Purchased (Promo - Non-Promo)')\nplt.ylabel('Brand')\nplt.show()\n\n\n\n\nThe bar chart illustrates the impact of promotions on the average quantity of beer purchased by brand. A positive value indicates that, on average, more beer is purchased when there is a promotion compared to when there isn‚Äôt. Some brands appear to be significantly more influenced by promotions, with customers buying more when the products are on sale or promotion.\nThis comprehensive analysis has provided insights into purchase patterns, demographic preferences, price sensitivity, and the impact of promotions on beer purchases."
  },
  {
    "objectID": "blog-listing.html",
    "href": "blog-listing.html",
    "title": "Insightful Analytics",
    "section": "",
    "text": "Order By\n       Default\n         \n          Title\n        \n         \n          Date - Oldest\n        \n         \n          Date - Newest\n        \n         \n          Author\n        \n     \n  \n    \n      \n      \n    \n\n\n\n\n  \n\n\n\n\nSpotify #2\n\n\n\n\n\n\n\n\n\nMar 8, 2024\n\n\nDylan Thody\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nSpotify\n\n\n\n\n\n\n\n\n\nMar 5, 2024\n\n\nDylan Thody\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\nStar Wars\n\n\n\n\n\n\n\n\n\nFeb 15, 2024\n\n\nDylan Thody\n\n\n3 min\n\n\n\n\n\n\n  \n\n\n\n\nPython Basics\n\n\n\n\n\n\n\n\n\nFeb 15, 2024\n\n\nDylan Thody\n\n\n2 min\n\n\n\n\n\n\n  \n\n\n\n\nArsenal\n\n\n\n\n\n\n\n\n\nFeb 8, 2024\n\n\nDylan Thody\n\n\n9 min\n\n\n\n\n\n\n  \n\n\n\n\nPost With Code\n\n\n\n\n\n\n\n\n\nOct 30, 2023\n\n\nYOUR NAME\n\n\n1 min\n\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "posts/Python Basics/pythonbasics.html",
    "href": "posts/Python Basics/pythonbasics.html",
    "title": "Python Basics",
    "section": "",
    "text": "A value is datum (literal) such as a number or text.\nThere are different types of values:\n\n323.3 is known as a float or double;\n22 is an integer\n‚ÄúHello World!‚Äù is a string.\n\n\na = 10\nprint(a)\n\n10\n\n\nHere we are going to define a list containing elements of different data types\n\nlist_example = [10, 1.23, \"like this\", True, None]\n#Print the entire list\nprint(list_example)\n\n[10, 1.23, 'like this', True, None]\n\n\n\nstring_one = \"This is an example \"\nstring_two = \"of string concatenation\"\n#all of the basic operators we see in math are available to use\n# + for addition, - for subtraction, * for multiplication\n# ** for exponent/powers, / for division, // for integer division\nstring_full = string_one + string_two\n#this works as you would expect on numbers\nprint(string_full)\n\nThis is an example of string concatenation\n\n\nIt works for lists too\n\n#it works for lists too\nlist_one = [\"apples\", \"oranges\"]\nlist_two = [\"pears\", \"satsumas\"]\nlist_full = list_one + list_two\nprint(list_full)\n\n['apples', 'oranges', 'pears', 'satsumas']\n\n\nWe can also multiply strings\n\nstring = \"apples, \"\nprint(string * 3)\n\napples, apples, apples, \n\n\nBoolean data have either True or False value\n\n10 == 20\n10 == '10'\n\nFalse\n\n\nthe == is an operator that compares the objects on either side and returns True if they have the same values\n\nboolean_condition1 = 10 == 20\nprint(boolean_condition1)\n\nboolean_condition2 = 10 == '10'\nprint(boolean_condition2)\n\nFalse\nFalse\n\n\nThe real power of conditions comes when we start to use them in more complex examples, such as if statements\n\nname = \"Geneseo\"\nscore = 99\n\nif name == \"Geneseo\" and score &gt; 90:\n    print(\"Geneseo, you achieved a high score.\")\n\nif name == \"Geneseo\" or score &gt; 90:\n    print(\"You could be called Geneseo or have a high score\")\n\nif name != \"Geneseo\" and score &gt; 90:\n    print(\"You are not called Geneseo and you have a high score\")\n\nGeneseo, you achieved a high score.\nYou could be called Geneseo or have a high score\n\n\nOne of the most useful conditional keywords is ‚Äúin‚Äù, this one must pop up ten times a day in most coders‚Äô lives because it can pick out a variable or make sure something is where it‚Äôs supposed to be\n\nname_list = [\"Lovelace\", \"Smith\", \"Hopper\", \"Babbage\"]\n\nprint(\"Lovelace\" in name_list)\n\nprint(\"Bob\" in name_list)\n\nTrue\nFalse\n\n\nOne conditional construct we‚Äôre bound to use at some point, is the if-else chain\n\nscore = 98\n\nif score == 100:\n    print(\"Top marks!\")\nelif score &gt; 90 and score &lt; 100:\n    print(\"High score!\")\nelif score &gt; 10 and score &lt;= 90:\n    pass\nelse:\n    print(\"Better luck next time.\")\n\nHigh score!"
  },
  {
    "objectID": "posts/Python Basics/pythonbasics.html#variable-description-for-starwars-data.frame",
    "href": "posts/Python Basics/pythonbasics.html#variable-description-for-starwars-data.frame",
    "title": "Python Basics",
    "section": "Variable Description for starwars data.frame",
    "text": "Variable Description for starwars data.frame\nThe following describes the variables in the starwars data.frame.\n\nfilms List of films the character appeared in\nname Name of the character\nspecies Name of species\nheight Height (cm)\nmass Weight (kg)\nhair_color, skin_color, eye_color Hair, skin, and eye colors\nbirth_year Year born (BBY = Before Battle of Yavin)\nsex The biological sex of the character, namely male, female, hermaphroditic, or none (as in the case for Droids).\ngender The gender role or gender identity of the character as determined by their personality or the way they were programmed (as in the case for Droids).\nhomeworld Name of homeworld"
  },
  {
    "objectID": "posts/Python Basics/pythonbasics.html#human-vs.-droid",
    "href": "posts/Python Basics/pythonbasics.html#human-vs.-droid",
    "title": "Python Basics",
    "section": "Human vs.¬†Droid",
    "text": "Human vs.¬†Droid\n\nggplot(data = \n         starwars %&gt;% \n         filter(species %in% c(\"Human\", \"Droid\"))) +\n  geom_boxplot(aes(x = species, y = mass, \n                   fill = species),\n               show.legend = FALSE)"
  },
  {
    "objectID": "posts/Python Basics/pythonbasics.html#variables",
    "href": "posts/Python Basics/pythonbasics.html#variables",
    "title": "Python Basics",
    "section": "",
    "text": "A value is datum (literal) such as a number or text.\nThere are different types of values:\n\n323.3 is known as a float or double;\n22 is an integer\n‚ÄúHello World!‚Äù is a string.\n\n\na = 10\nprint(a)\n\n10\n\n\nHere we are going to define a list containing elements of different data types\n\nlist_example = [10, 1.23, \"like this\", True, None]\n#Print the entire list\nprint(list_example)\n\n[10, 1.23, 'like this', True, None]\n\n\n\nstring_one = \"This is an example \"\nstring_two = \"of string concatenation\"\n#all of the basic operators we see in math are available to use\n# + for addition, - for subtraction, * for multiplication\n# ** for exponent/powers, / for division, // for integer division\nstring_full = string_one + string_two\n#this works as you would expect on numbers\nprint(string_full)\n\nThis is an example of string concatenation\n\n\nIt works for lists too\n\n#it works for lists too\nlist_one = [\"apples\", \"oranges\"]\nlist_two = [\"pears\", \"satsumas\"]\nlist_full = list_one + list_two\nprint(list_full)\n\n['apples', 'oranges', 'pears', 'satsumas']\n\n\nWe can also multiply strings\n\nstring = \"apples, \"\nprint(string * 3)\n\napples, apples, apples, \n\n\nBoolean data have either True or False value\n\n10 == 20\n10 == '10'\n\nFalse\n\n\nthe == is an operator that compares the objects on either side and returns True if they have the same values\n\nboolean_condition1 = 10 == 20\nprint(boolean_condition1)\n\nboolean_condition2 = 10 == '10'\nprint(boolean_condition2)\n\nFalse\nFalse"
  },
  {
    "objectID": "posts/Spotify/Spotify_df.html",
    "href": "posts/Spotify/Spotify_df.html",
    "title": "Spotify",
    "section": "",
    "text": "Variable Description\npid: playlist ID; unique ID for playlist\nplaylist_name: a name of playlist\npos: a position of the track within a playlist (starting from 0)\nartist_name: name of the track‚Äôs primary artist\ntrack_name: name of the track\nduration_ms: duration of the track in milliseconds\nalbum_name: name of the track‚Äôs album\n\nspotify &lt;- read_csv(\"https://bcdanl.github.io/data/spotify_all.csv\")\n\nrmarkdown::paged_table(spotify)\n\n\n\n  \n\n\n\n\nVariable Description for Spotify data.frame\nThe following describes the variables in the Spotify data.frame.\n\npid Playlist Identification Number\nplaylist_name Name of the Playlist\npos Song Identification Number\nartist_name Name of the Artist\n\n\n\nFavorite Artists\nSome of my favorite artists include Justin Bieber, Bruno Mars, Nirvana, and Adele\nYou can see in the following data table a table representing them and the Playlists that you can find them in\n\nselected_artists &lt;- c(\"Bieber\", \"Bruno Mars\", \"Nirvana\", \"Adele\")\nfavorite_artists &lt;- subset(spotify, artist_name %in% selected_artists)\n\nrmarkdown::paged_table(favorite_artists)\n\n\n\n  \n\n\n\n\nShowcasing only wedding playlist\nFor all you readers out there looking forward to getting married, I sorted this to only show you wedding songs‚Ä¶\nYou‚Äôre welcome\n\nselected_playlist_1 &lt;- c(\"Wedding\")\nwedding_subset &lt;- subset(spotify, playlist_name %in% selected_playlist_1)\n\nrmarkdown::paged_table(wedding_subset)\n\n\n\n  \n\n\n\n\nMom‚Äôs, this one is for you\nFor the last data set, I will separate all the songs in the ‚ÄúMom‚Äôs playlist‚Äù so they now always have got something to listen to\nOnce again.. you‚Äôre welcome\n\nselected_playlist_2 &lt;- c(\"Mom's playlist\")\nmom_subset &lt;- subset(spotify, playlist_name %in% selected_playlist_2)\n\nrmarkdown::paged_table(mom_subset)\n\n\n\n  \n\n\nI hope my data representation helped you find what you were looking for. If you have any requests please email me through the home page and I will create a new data table for you!\nHave a great day!"
  },
  {
    "objectID": "posts/Spotify 2/Spotify_df2.html",
    "href": "posts/Spotify 2/Spotify_df2.html",
    "title": "Spotify #2",
    "section": "",
    "text": "pid: playlist ID; unique ID for playlist\nplaylist_name: a name of playlist\npos: a position of the track within a playlist (starting from 0)\nartist_name: name of the track‚Äôs primary artist\ntrack_name: name of the track\nduration_ms: duration of the track in milliseconds\nalbum_name: name of the track‚Äôs album\n\nspotify &lt;- read_csv(\"https://bcdanl.github.io/data/spotify_all.csv\")\n\nrmarkdown::paged_table(spotify)"
  },
  {
    "objectID": "posts/Spotify 2/Spotify_df2.html#bruno-mars-summary",
    "href": "posts/Spotify 2/Spotify_df2.html#bruno-mars-summary",
    "title": "Spotify #2",
    "section": "Bruno Mars Summary",
    "text": "Bruno Mars Summary\nBruno Mars is a Grammy-winning singer, songwriter, and record producer known for his smooth vocals and versatile musical style. Born in Honolulu, Hawaii, Mars rose to fame with hits like ‚ÄúJust the Way You Are,‚Äù ‚ÄúLocked Out of Heaven,‚Äù and ‚ÄúUptown Funk.‚Äù He is celebrated for his dynamic stage presence and ability to blend various genres such as pop, R&B, funk, and reggae. With multiple chart-topping singles and albums, Bruno Mars continues to be a prominent figure in the music industry, captivating audiences worldwide with his catchy tunes and energetic performances.\nYou can see in the data table following, a set that focuses solely on Bruno Mars.\n\nselected_artists &lt;- c(\"Bruno Mars\")\nfavorite_artists &lt;- subset(spotify, artist_name %in% selected_artists)\n\nrmarkdown::paged_table(favorite_artists)"
  },
  {
    "objectID": "project.html#yfinance",
    "href": "project.html#yfinance",
    "title": "DANL 210 Project",
    "section": "2.1 yfinance",
    "text": "2.1 yfinance\nyfinance is a Python library that provides an easy to use interface in order to access financial data from Yahoo Finance.\nTo use it, you have to first install yfinance using:\n‚Äòpip install yfinance‚Äô\nThen you create a ticker object for the company you are interested in using. For example I will create a ticker object for Apple below:\n‚Äòticker = yf.Ticker(‚ÄúAAPL‚Äù)‚Äô\nTo retrieve financials for annual data, you use:\n‚Äòticker.financials‚Äô\nTo get access to a company balance sheet, you use:\n‚Äòticker.balance_sheet‚Äô\nTo get access to a Cash Flow Statement, you use:\n‚Äòticker.cashflow‚Äô\nyfinance is highly effecient for pulling structured financial data quickly, making it ideal for financial anlaysis and modeling."
  },
  {
    "objectID": "project.html#selenium",
    "href": "project.html#selenium",
    "title": "DANL 210 Project",
    "section": "2.2 selenium",
    "text": "2.2 selenium\nselenium is a powerful tool for web scraping and browser automation. It can be used to extract ESG (Environmental, Social, and Governance) data from websites like Yahoo Finance that do not provide an API for such data.\nTo install selenium you use:\n‚Äòpip install selenium‚Äô\nTo navigate to Web Pages you use the WebDriver to the target URL which in this case would be to the Yahoo Finance page.\nUse WebDriver methods to locate and extract ESG data elements from the webpage using techniques such as XPath or CSS selectors.\nYou can also handle page loading and dynamic content using:\n‚Äòtime.sleep()‚Äô\nCombining yfinance for financial and accounting data with selenium for ESG data allows you to comprehensively analyze a company‚Äôs performance and sustainability. This dual approach leverages the strengths of both libraries, providing a robust solution for data retrieval in financial analysis and ESG reporting."
  },
  {
    "objectID": "project.html#question-1",
    "href": "project.html#question-1",
    "title": "DANL 210 Project",
    "section": "4.1 Question 1",
    "text": "4.1 Question 1\nWhat are the mean and standard deviation of the closing prices for each company over the last year?\n\nlibrary(reticulate)\n\nuse_python(\"/opt/anaconda3/bin/python3\")\n\npy_run_string(\"\nimport pandas as pd\n\nfinancial_data = pd.read_csv('financial_data.csv')\n\nmean_std = financial_data.groupby('Symbol')['Close'].agg(['mean', 'std'])\nprint(mean_std)\n\")\n\n              mean        std\nSymbol                       \nAAPL    181.146427   8.380725\nAMZN    148.549881  21.280316\nGOOGL   137.213849  12.458403\nMSFT    364.478164  37.687331"
  },
  {
    "objectID": "project.html#question-2",
    "href": "project.html#question-2",
    "title": "DANL 210 Project",
    "section": "4.2 Question 2",
    "text": "4.2 Question 2\nWhat is the distribution of closing prices for each company?\n\nlibrary(reticulate)\n\nuse_python(\"/opt/anaconda3/bin/python3\")\n\npy_run_string(\"\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfinancial_data = pd.read_csv('financial_data.csv')\n\nplt.figure(figsize=(14, 7))\nsns.histplot(data=financial_data, x='Close', hue='Symbol', multiple='stack', kde=True)\nplt.title('Distribution of Closing Prices for Each Company')\nplt.xlabel('Close')\nplt.ylabel('Frequency')\nplt.show()\n\")"
  },
  {
    "objectID": "project.html#question-3",
    "href": "project.html#question-3",
    "title": "DANL 210 Project",
    "section": "4.3 Question 3",
    "text": "4.3 Question 3\nAre there any significant correlations between the closing prices of different companies?\n\nlibrary(reticulate)\n\nuse_python(\"/opt/anaconda3/bin/python3\")\n\npy_run_string(\"\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nfinancial_data = pd.read_csv('financial_data.csv')\n\nfinancial_data_numeric = financial_data.pivot_table(index='Date', columns='Symbol', values='Close')\n\nfinancial_corr = financial_data_numeric.corr()\nprint(financial_corr)\n\nplt.figure(figsize=(10, 8))\nsns.heatmap(financial_corr, annot=True, cmap='coolwarm', vmin=-1, vmax=1)\nplt.title('Correlation Heatmap for Closing Prices')\nplt.show()\n\")\n\nSymbol      AAPL      AMZN     GOOGL      MSFT\nSymbol                                        \nAAPL    1.000000 -0.152183 -0.184896 -0.010555\nAMZN   -0.152183  1.000000  0.852946  0.942318\nGOOGL  -0.184896  0.852946  1.000000  0.759236\nMSFT   -0.010555  0.942318  0.759236  1.000000\n\n\n##Question 4\nHow do the distributions of the Environmental, Social, and Governance scores compare?\n\nlibrary(reticulate)\n\nuse_python(\"/opt/anaconda3/bin/python3\")\n\npy_run_string(\"\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n\nesg_data = pd.read_csv('cleaned_esg_data.csv')\n\nplt.figure(figsize=(14, 7))\nfor col in esg_data.columns[1:]:\n    sns.kdeplot(esg_data[col], label=col, fill=True)\nplt.title('Distribution of ESG Scores')\nplt.xlabel('Score')\nplt.ylabel('Density')\nplt.legend()\nplt.show()\n\")"
  }
]